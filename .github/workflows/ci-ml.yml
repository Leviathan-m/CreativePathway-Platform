name: CI - ML Service

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/ai-service/**'
      - '.github/workflows/ci-ml.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/ai-service/**'
      - '.github/workflows/ci-ml.yml'

permissions:
  contents: read
  security-events: write

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/ai-service

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/ai-service/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run black (check formatting)
      continue-on-error: true
      run: |
        pip install black
        black --check --diff .

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/ai-service

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/ai-service/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests (skip if no tests)
      run: |
        if compgen -G "tests/**/*.py" > /dev/null || compgen -G "**/*_test.py" > /dev/null || compgen -G "**/test_*.py" > /dev/null; then
          python -m pytest --cov=. --cov-report=xml --cov-report=term-missing
        else
          echo "No tests found; skipping pytest."
        fi

    - name: Upload coverage reports
      if: false
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/ai-service/coverage.xml
        flags: ml-service
        name: ML Service Coverage

  security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/ai-service

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Run pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit
        pip-audit --format json --output audit-results.json || true

    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-results.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          backend/ai-service/audit-results.json
          backend/ai-service/bandit-results.json

  build:
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    defaults:
      run:
        working-directory: backend/ai-service

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/ai-service/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Docker image
      run: |
        docker build -t creative-pathway-ml:${{ github.sha }} .
        docker build -t creative-pathway-ml:latest .

    - name: Test Docker image health check
      run: |
        docker run -d --name ml-test -p 5000:5000 creative-pathway-ml:${{ github.sha }}
        sleep 10
        curl -f http://localhost:5000/api/ml/health || (docker logs ml-test && exit 1)
        docker stop ml-test && docker rm ml-test

  docker-security-scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image for scanning
      working-directory: backend/ai-service
      run: docker build -t creative-pathway-ml-scan .

    - name: Run Trivy on Docker image
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        scan-ref: 'creative-pathway-ml-scan'
        format: 'sarif'
        output: 'docker-trivy-results.sarif'
    # Disable SARIF upload to avoid permission issues on forks
    - name: Upload Docker scan results
      if: false
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'docker-trivy-results.sarif'
